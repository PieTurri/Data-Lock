package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.security.NoSuchAlgorithmException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.TitledBorder;

import controller.Controller;

public class UserView extends JFrame{

	private JFrame frame;
	private JPanel panel;
	private JLabel labelUser;
	private JLabel labelEncryptKeyAES;
	private JLabel labelEncryptKeyCifCes;
	
	private JButton logoutButton;
	private JLabel titleLabel;
	private JTextArea textArea;
	private JTextArea encryptKeyAES;
	private JTextArea encryptKeyCifCes;
	private JButton openFileButton;
	private JButton generateKeyButtonAES;
	private JButton generateKeyButtonCifCes;
	
	private JButton saveButton;
	private JButton encryptButton;
	private JButton decryptButton;
	private JScrollPane scrollPaneFinalMessage;
	private JScrollPane scrollPaneMessage;
	private JTextArea finalMessageArea;
	private Font font;
	private Font titlFont;
	private TitledBorder titledBorder;
	private TitledBorder titledBorderFinal;
	private String autoGeneratedKey;
	private File txtFile;
	private JButton privateSectionButton;
	private JButton buttonCifCes;
	private JButton buttonAES;
	
	protected Controller controller;

	private Image iconFrame;

	public UserView() {}
	
	protected void addElementToFrame(int ruolo) {

		if(ruolo == 0) {
			panel.add(privateSectionButton);
		}
		panel.add(logoutButton);
		panel.setLayout(null);
		panel.add(labelUser);
		panel.add(scrollPaneMessage);
		
		panel.add(openFileButton);
		
		panel.add(scrollPaneFinalMessage);
		panel.add(saveButton);
		panel.add(titleLabel);
		panel.add(buttonCifCes);
		panel.add(buttonAES);			
		
		frame.setVisible(true);
		frame.setIconImage(iconFrame);
		frame.add(panel);
	}

	protected void setContentFrame(int ruolo){
	
		textArea.setBackground(Color.WHITE);
		textArea.setLineWrap(true);
	
		scrollPaneMessage.setBounds(15, 120, 650, 200);
		scrollPaneMessage.setBorder(titledBorder);
	
		labelUser.setFont(font);
		if(ruolo == 0)
			labelUser.setBounds(450, 35, 180, 20);
		else
			labelUser.setBounds(500, 35, 180, 20);
	
	
		logoutButton.setBounds(630, 20, 50, 50);
		logoutButton.setBorderPainted(false);
		logoutButton.setBorderPainted(false);
		logoutButton.setContentAreaFilled(false);
		logoutButton.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				controller.login();
			}
		});
	
	
		privateSectionButton.setBounds(590, 27, 35, 36);
		privateSectionButton.setBorderPainted(false);
		privateSectionButton.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				controller.showLogSection();
			}
		});
	
		openFileButton.setBounds(566, 90, 98, 25);
		openFileButton.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
			
				if (e.getSource() == openFileButton)
				{
					controller.openFile(textArea, txtFile, true);
					//controller.fileLoaded = true;
				}
			}
		});

		generateKeyButtonAES.setBounds(475, 410, 200, 25);
		generateKeyButtonAES.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(generateKeyButtonAES.isEnabled()) {
					try {
						autoGeneratedKey = controller.generatedKey(0);
					} catch (NoSuchAlgorithmException e1) {
						System.out.println("Eccezione0: "+e1.getMessage());
					}
					encryptKeyAES.setText(autoGeneratedKey);
					
				}
			}
		});
		
		generateKeyButtonCifCes.setBounds(475, 410, 200, 25);
		generateKeyButtonCifCes.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(generateKeyButtonCifCes.isEnabled()) {
					try {
						autoGeneratedKey = controller.generatedKey(1);
					} catch (NoSuchAlgorithmException e1) {
						System.out.println("Eccezione1: "+e1.getMessage());
					}
					encryptKeyCifCes.setText(autoGeneratedKey);
					
				}
			}
		});
			
		labelEncryptKeyAES.setBounds(20, 410, 80, 25);
		encryptKeyAES.setBounds(100, 410, 350,25);
	
		labelEncryptKeyCifCes.setBounds(20, 410, 100, 25);
		encryptKeyCifCes.setBounds(100, 410, 350,25);

		finalMessageArea.setBackground(Color.WHITE);
		finalMessageArea.setLineWrap(true);
		finalMessageArea.setEditable(false);

		scrollPaneFinalMessage.setBounds(15, 530, 650, 200);
		scrollPaneFinalMessage.setBorder(titledBorderFinal);
		
		encryptButton.setBounds(150, 475, 130, 25);
		encryptButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(textArea.getText().equals("")) {
					controller.showErrorView("È obbligatorio inserire un messaggio per criptarlo!");
				}else {
					if(controller.getAlgorithm() == 0) {
						if(encryptKeyAES.getText().equals("") || encryptKeyAES.getText().length() < 16) {
							controller.showErrorView("Per procedere serve una chiave di almeno 16 caratteri!");
						}else {
							try {
								controller.cryptStrategy(0,textArea,encryptKeyAES,finalMessageArea);
							} catch (Exception e1) {
								e1.printStackTrace();
							}	
						}
					}else {
						if(encryptKeyCifCes.getText().equals("")) {
							controller.showErrorView("Per procedere serve una chiave!");
						}else {
							try {
								if(controller.checkText(textArea)) {
								
									if(!encryptKeyCifCes.getText().matches(".*[a-zA-Z]+.*") && encryptKeyCifCes.getText().length() < 3)
										controller.cryptStrategy(0,textArea,encryptKeyCifCes,finalMessageArea);
									else
										controller.showErrorView("La chiave può contenere solo numeri minori di 100!");
								}else
									controller.showErrorView("		Messaggio non decifrabile!");
							} catch (Exception e1) {
								e1.printStackTrace();
							}	
						}
					}
				}
			}
		});
	
		decryptButton.setBounds(450, 475, 130, 25);
		decryptButton.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
				if(textArea.getText().equals("") && finalMessageArea.getText().equals("")){
					controller.showErrorView("Non sono presenti testi da decriptare!");
				}else {
					if(controller.getIsCrypted()) {
						if(controller.getAlgorithm() == 0) {
							if(encryptKeyAES.getText().length() < 16) {
								controller.showErrorView("Per procedere serve una chiave di almeno 16 caratteri!");
							}else {
								try {
									controller.cryptStrategy(1,textArea,encryptKeyAES,finalMessageArea);
								} catch (Exception e1) {
									System.out.println("Eccezione decrypt button 1");
								}
							}
						}else {
							try {
								controller.cryptStrategy(1,textArea,encryptKeyCifCes,finalMessageArea);
							} catch (Exception e1) {
								System.out.println("Eccezione decrypt button 1.1");
							}
						}
					}else {
						if(!finalMessageArea.getText().equals("")) {
							if(controller.getAlgorithm() == 0) {
								if(encryptKeyAES.getText().length() >= 16)	{
									try {
										controller.cryptStrategy(1,finalMessageArea,encryptKeyAES,finalMessageArea);
									} catch (Exception e1) {
										System.out.println("Eccezione decrypt button 2");
									}
								}else controller.showErrorView("Per procedere serve una chiave di almeno 16 caratteri!");
							}else {
								if(!encryptKeyCifCes.getText().matches(".*[a-zA-Z]+.*") && encryptKeyCifCes.getText().length() < 3) {
									try {		
										controller.cryptStrategy(1,finalMessageArea,encryptKeyCifCes,finalMessageArea);
									} catch (Exception e1) {
										System.out.println("Eccezione decrypt button 2.1");
									}
								}else controller.showErrorView("La chiave può contenere solo numeri minori di 100!");
							}
						}else controller.showErrorView("Impossibile decifrare un messaggio non cifrato!");
							/*
							*/
							
						}
					}
				
			}
		});
	
		saveButton.setBounds(300, 750, 100, 20);
		saveButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
			
				if(!finalMessageArea.getText().equals(""))
					try {
						controller.saveFile(finalMessageArea);
						if(controller.getAlgorithm() == 0)
							controller.reset(finalMessageArea, textArea, encryptKeyAES);
						else
							controller.reset(finalMessageArea, textArea, encryptKeyCifCes);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				else {
					controller.showErrorView("Il file non è stato modificato!");
				}
			}
		});
	
		titleLabel.setBounds(15, 10, 300, 50);
		titleLabel.setFont(titlFont);
	
		buttonCifCes.setBounds(220,350,100,20);
		buttonCifCes.setFocusPainted(false);
		buttonCifCes.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
				buttonCifCes.setBackground(Color.YELLOW);
				buttonAES.setBackground(Color.GRAY);
				buttonCifCes.setOpaque(true);
				buttonAES.setOpaque(true);
			
				encryptButton.setText("CdC Encrypt");
				decryptButton.setText("CdC Decrypt");
			
				controller.setAlgorithm(1);
			
				panel.add(encryptKeyCifCes);
				
				panel.add(labelEncryptKeyCifCes);
				
				panel.add(generateKeyButtonCifCes);
				
				
				panel.remove(encryptKeyAES);
				panel.remove(labelEncryptKeyAES);
				panel.remove(generateKeyButtonAES);
				panel.add(encryptButton);
				panel.add(decryptButton);
				
				frame.invalidate();
				frame.validate();
				frame.repaint();
			
			}
		});
	
		buttonAES.setBounds(370,350,100,20);
		buttonAES.setFocusPainted(false);
		buttonAES.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				buttonAES.setBackground(Color.YELLOW);
				buttonCifCes.setBackground(Color.GRAY);
				buttonCifCes.setOpaque(true);
				buttonAES.setOpaque(true);
			
				encryptButton.setText("AES Encrypt");
				decryptButton.setText("AES Decrypt");
			
				controller.setAlgorithm(0);
			
				panel.add(encryptKeyAES);
				panel.add(generateKeyButtonAES);
				panel.add(labelEncryptKeyAES);
				panel.add(generateKeyButtonAES);
				panel.add(encryptButton);
				panel.add(decryptButton);
			
				panel.remove(encryptKeyCifCes);				
				panel.remove(labelEncryptKeyCifCes);				
				panel.remove(generateKeyButtonCifCes);
				
				
				frame.invalidate();
				frame.validate();
				frame.repaint();
			
			}
		});
	}

protected void setFrame() {
	frame.setSize(700, 820);
	Dimension screenSize = Toolkit.getDefaultToolkit ( ).getScreenSize ( );
	frame.setLocation ( ( screenSize.width / 2 ) - ( frame.getWidth ( ) / 2 ), (screenSize.height / 2 ) - ( frame.getHeight ( ) / 2 ) );
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.setResizable(false);
	}

	protected void instanceElements(int ruolo) {
	
		frame = new JFrame("Data Lock");
		panel = new JPanel();
		textArea = new JTextArea("");
		titledBorder = new TitledBorder("Message:");
		if(ruolo == 0)
			labelUser = new JLabel("Welcome Admin!");
		else 
			labelUser = new JLabel("Welcome User!");
		font = new Font("Courier", Font.BOLD,15);
	
		openFileButton = new JButton("Open File...");
		encryptKeyAES = new JTextArea("");
		encryptKeyCifCes = new JTextArea("");
		
		
		labelEncryptKeyAES = new JLabel("AES Key: ");	
		
		labelEncryptKeyCifCes = new JLabel("Cdc. Key: ");	
		
	
		generateKeyButtonAES = new JButton("Generate AES Key");
		generateKeyButtonCifCes = new JButton("Generate CdC Key");
		

		finalMessageArea = new JTextArea(10, 20);
		titledBorderFinal = new TitledBorder("Final Message:");
		encryptButton = new JButton("");
		decryptButton = new JButton("");
		saveButton = new JButton("Save File");
		privateSectionButton = new JButton(new ImageIcon(getClass().getResource("/settings.png")));
		logoutButton = new JButton(new ImageIcon(getClass().getResource("/logout.png")));
		titleLabel = new JLabel("Data Lock");
		titlFont = new Font("Courier", Font.PLAIN,40);
		scrollPaneMessage = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPaneFinalMessage = new JScrollPane(finalMessageArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		iconFrame = new ImageIcon(this.getClass().getResource("/enigma1.png")).getImage();
		
		buttonCifCes = new JButton("CdC");
		buttonCifCes.setBackground(Color.GRAY);
		buttonAES = new JButton("AES");
		buttonAES.setBackground(Color.GRAY);
	}
}
